<?php

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –ø–æ ID –∫—Ä–µ–¥–∏—Ç–∞.
 *
 * –ò—â–µ—Ç —Å—É–º–º—É –≤ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö:
 * 1. –ò–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö/—Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ wpp_get_loan_data_r()
 * 2. –ò–∑ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ get_columns_data()
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–æ–¥–µ: "$1,000.50", "1 000,50", "1000" –∏ —Ç.–¥.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ (float) –∏–ª–∏ 0, –µ—Å–ª–∏ —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
 *
 * @since 1.0.0
 *
 * @param string|int|null $loan_id ID –∫—Ä–µ–¥–∏—Ç–∞. –ï—Å–ª–∏ null ‚Äî –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å –∏–∑ $_GET['loan'].
 * @return float –ù–∞–π–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
 *
 * @example
 *   wpp_get_total_loan_amount(123);        // ‚Üí 10000.0
 *   wpp_get_total_loan_amount();           // –ë–µ—Ä—ë—Ç –∏–∑ $_GET['loan']
 *   wpp_get_total_loan_amount('invalid');  // ‚Üí 0
 */
function wpp_get_total_loan_amount( $loan_id = null ) {

	// === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è $loan_id ===
	if ( null === $loan_id ) {
		global $loan_id;
		if ( ! $loan_id ) {
			return 0.0;
		}
	}

	// –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ/—á–∏—Å–ª—É, —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
	$loan_id = trim( (string) $loan_id );
	if ( '' === $loan_id ) {

		return 0.0;
	}

	// === 2. –ò—Å—Ç–æ—á–Ω–∏–∫ 1: wpp_get_loan_data_r ===
	$default = wpp_get_loan_data_r( $loan_id );

	if ( ! empty( $default['total_loan_amount'] ) ) {

		$raw_amount = $default['total_loan_amount'];

		// –û—á–∏—â–∞–µ–º –æ—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö "–º—É—Å–æ—Ä–Ω—ã—Ö" —Å–∏–º–≤–æ–ª–æ–≤: $, –∑–∞–ø—è—Ç—ã–µ, –ø—Ä–æ–±–µ–ª—ã, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∞–±—ã
		$cleaned = preg_replace( '/[^\d.-]+/', '', $raw_amount );

		if ( is_numeric( $cleaned ) && '' !== $cleaned ) {
			$amount = (float) $cleaned;
			if ( $amount >= 0 ) {
				return $amount;
			}
		}
	}

	// === 3. –ò—Å—Ç–æ—á–Ω–∏–∫ 2: get_columns_data ===
	$data = get_colums_data( $loan_id );

	if (
		! empty( $data[ $loan_id ] ) &&
		! empty( $data[ $loan_id ]['raw_data'] ) &&
		isset( $data[ $loan_id ]['raw_data']->s4_total_loan_amount_sum )
	) {
		$amount = $data[ $loan_id ]['raw_data']->s4_total_loan_amount_sum;

		if ( is_numeric( $amount ) && ( (float) $amount ) >= 0 ) {
			return (float) $amount;
		}
	}

	// === 4. –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0 ===
	return 0.0;
}


/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É —Ü–µ–Ω—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –°–®–ê (USD).
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 *   1234.56 ‚Üí $1,234.56
 *   1000    ‚Üí $1,000.00
 *   -50.25  ‚Üí -$50.25
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ, –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏.
 * –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
 *   - –°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã: $
 *   - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á: –∑–∞–ø—è—Ç–∞—è (,)
 *   - –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏: —Ç–æ—á–∫–∞ (.)
 *   - –î–≤–∞ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
 *
 * @since 1.0.0
 *
 * @param float|int|string $amount –°—É–º–º–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–æ–ø—É—Å—Ç–∏–º—ã —á–∏—Å–ª–∞, —Å—Ç—Ä–æ–∫–∏ —Å —á–∏—Å–ª–∞–º–∏.
 * @param array            $args   –ú–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
 *                                 - 'decimals'      (int)    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.
 *                                 - 'thousand_sep'  (string) –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ','.
 *                                 - 'decimal_sep'   (string) –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '.'.
 *
 * @return string –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: "$1,234.56").
 *                –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "$0.00", –µ—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.
 *
 * @example
 *   echo format_usd_price(1234.56);        // ‚Üí $1,234.56
 *   echo format_usd_price(1000, ['decimals' => 0]); // ‚Üí $1,000
 */
function format_usd_price( $amount, $args = [] ) {
	// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	$defaults = [
		'decimals'     => 2,
		'thousand_sep' => ',',
		'decimal_sep'  => '.',
	];

	$args = wp_parse_args( $args, $defaults );

	// –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —á–∏—Å–ª—É
	$amount = filter_var( $amount, FILTER_VALIDATE_FLOAT );
	if ( false === $amount ) {
		$amount = 0.0;
	}

	$negative = $amount < 0;
	$amount   = abs( $amount ); // –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
	$decimals = max(0, (int) $args['decimals']);

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ
	$formatted = number_format( $amount, $decimals, $args['decimal_sep'], $args['thousand_sep'] );

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–æ–ª–ª–∞—Ä–∞ —Å–ª–µ–≤–∞
	$formatted = '$' . $formatted;

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞–∫ –º–∏–Ω—É—Å–∞, –µ—Å–ª–∏ –±—ã–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
	if ( $negative ) {
		$formatted = '-' . $formatted;
	}

	return $formatted;
}

/**
 * Determines the current manager dashboard endpoint
 *
 * This function checks whether the current page is a manager dashboard endpoint
 * and optionally verifies if it matches a specific endpoint. It always returns
 * either the endpoint identifier string or false.
 *
 * @since 1.1.0
 *
 * @param string $specific_endpoint (optional) Specific endpoint slug to verify against.
 *                                 Possible values:
 *                                 - 'main' (dashboard homepage)
 *                                 - 'law-firms-clerks'
 *                                 - 'title-companies'
 *                                 - 'brokers'
 *                                 - 'appraisers'
 *                                 - 'loan' (loan endpoints)
 *                                 - Empty string to get current endpoint
 *
 * @return string|false Returns:
 *                     - Current endpoint slug when no specific endpoint provided
 *                     - Requested endpoint slug when matches current page
 *                     - false when not a dashboard page or no match found
 *
 * @example // Get current endpoint
 * $endpoint = wpp_is_manager_dashboard();
 * if ($endpoint) {
 *     switch ($endpoint) {
 *         case 'main':
 *             // Handle dashboard homepage
 *             break;
 *         case 'loan':
 *             $loan_id = get_query_var('loan_id');
 *             // Handle loan page
 *             break;
 *     }
 * }
 *
 * @example // Check for specific endpoint
 * if (wpp_is_manager_dashboard('loan') === 'loan') {
 *     // This is a loan endpoint page
 *     $loan_id = get_query_var('loan_id');
 * }
 *
 * @example // Secure endpoint check with capability verification
 * if (wpp_is_manager_dashboard() && current_user_can('manage_options')) {
 *     // Safe to perform admin operations
 * }
 */
function wpp_is_manager_dashboard($specific_endpoint = '') {
	global $wp_query;

	// Get current endpoint from query vars
	$current_endpoint = $wp_query->get('manager_dashboard');

	// Return false if not a dashboard page
	if (empty($current_endpoint)) {
		return false;
	}

	// If checking against specific endpoint
	if (!empty($specific_endpoint)) {
		// Special handling for loan endpoints
		if ($specific_endpoint === 'loan') {
			return strpos($current_endpoint, 'loan') === 0 ? $current_endpoint : false;
		}
		// Exact match for other endpoints
		return $current_endpoint === $specific_endpoint ? $current_endpoint : false;
	}

	// Default case: return current endpoint
	return $current_endpoint;
}


/**
 * Checks if the current user is allowed to access the Manager Dashboard.
 *
 * This function returns true if the user has one of the following:
 * - 'manage_options' capability (typically administrators)
 * - 'loans_manager' role
 *
 * It safely handles cases where the user is not logged in.
 *
 * üîó References:
 * - {@see https://developer.wordpress.org/reference/functions/wp_get_current_user/} `wp_get_current_user()`
 * - {@see https://developer.wordpress.org/reference/functions/current_user_can/} `current_user_can()`
 * - {@see https://developer.wordpress.org/plugins/users/roles-and-capabilities/} Roles & Capabilities
 *
 * üìå Usage:
 * ```php
 * if ( wpp_is_user_dashboard_allowed() ) {
 *     // Load dashboard content
 * } else {
 *     // Show access denied
 * }
 * ```
 *
 * @since 1.0
 * @author WP_Panda <panda@wp-panda.pro>
 *
 * @return bool True if user is allowed, false otherwise.
 */
function wpp_is_user_dashboard_allowed() {
	// Check for admin capabilities (typical for administrators)
	if ( current_user_can( 'manage_options' ) ) {
		return true;
	}

	// Check if user has the specific role 'loans_manager'
	$user = wp_get_current_user();
	if ( in_array( 'loans_manager', (array) $user->roles, true ) ) {
		return true;
	}

	// Deny access by default
	return false;
}