jQuery(document).ready(function ($) {
    'use strict';

   // console.log('WPP Address Field: Google Places Autocomplete –∑–∞–ø—É—â–µ–Ω');

    function initGoogleAutocompleteFields() {
        $('.wpp-wpp_address_field').each(function () {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç input –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –µ–≥–æ –≤–Ω—É—Ç—Ä–∏
            const input = this.tagName === 'INPUT' ? this : this.querySelector('input[type="text"]');

            if (!input) {
               // console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç <input type="text"> ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', this);
                return;
            }

            if (input._autocomplete_initialized) {
               // console.log(`üîÑ –ü–æ–ª–µ "${input.id}" —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return;
            }

            const fieldName = $(input).attr('data-field-name') || $(input).attr('name');
            const fieldId = input.id;
            const detailsContainer = $('#' + fieldId + '-details');

           // console.groupCollapsed(`üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è "${fieldName}"`);
            //console.log('DOM —ç–ª–µ–º–µ–Ω—Ç:', input);
           // console.log('ID –ø–æ–ª—è:', fieldId);
            //console.log('–ö–ª–∞—Å—Å—ã:', input.classList.value);
           // console.log('–¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:', input.value.trim() || '(–ø—É—Å—Ç–æ)');
           // console.groupEnd();

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            const autocompleteOptions = {
                types: ['address'],
                componentRestrictions: { country: 'ru' },
                fields: ['place_id', 'geometry', 'formatted_address', 'address_components']
            };

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
            const autocomplete = new google.maps.places.Autocomplete(input, autocompleteOptions);

            input._autocomplete = autocomplete;
            input._autocomplete_initialized = true;

          //  console.log(`üìç Autocomplete –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—è "${fieldName}"`);

            // –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∫ Google
            autocomplete.addListener('place_changed', function () {
                const place = autocomplete.getPlace();
                const request = {
                    input: input.value,
                    options: autocompleteOptions
                };

               // console.groupCollapsed(`üì° –ó–∞–ø—Ä–æ—Å –∫ Google: ${fieldName}`);
               // console.log('–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –∞–¥—Ä–µ—Å:', request.input);
               // console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', request.options);
              //  console.groupEnd();

              //  console.groupCollapsed(`üì• –û—Ç–≤–µ—Ç –æ—Ç Google: ${fieldName}`);
                if (!place.geometry) {
                 //   console.warn('‚ö†Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –≤—Ä—É—á–Ω—É—é');
                    if (detailsContainer.length) detailsContainer.hide();
                //    console.groupEnd();
                    return;
                }

                // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
               // console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:', place.formatted_address);
               // console.log('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', {
                   // lat: place.geometry.location.lat(),
                    //lng: place.geometry.location.lng()
               // });

                // –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                if (place.address_components && Array.isArray(place.address_components)) {
                    place.address_components.forEach((component, index) => {
                       // console.log(` - [${index}] ${component.types.join(', ')}: ${component.long_name}`);
                    });
                } else {
                   // console.warn('‚ö†Ô∏è address_components –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç');
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ DOM
                if (detailsContainer.length) {
                    const city = place.address_components?.find(c => c.types.includes('locality'))?.long_name || '–ù–µ –Ω–∞–π–¥–µ–Ω';
                    const postalCode = place.address_components?.find(c => c.types.includes('postal_code'))?.long_name || '–ù–µ –Ω–∞–π–¥–µ–Ω';
                    const lat = place.geometry?.location?.lat() || '';
                    const lng = place.geometry?.location?.lng() || '';

                    detailsContainer.find('.address-full').text(place.formatted_address || '');
                    detailsContainer.find('.address-city').text(city);
                    detailsContainer.find('.address-zip').text(postalCode);
                    detailsContainer.find('.address-lat').text(lat);
                    detailsContainer.find('.address-lng').text(lng);
                    detailsContainer.show();
                }

                console.groupEnd();
            });
        });
    }

    // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ Google Maps API
    const checkGoogleMaps = setInterval(() => {
        if (typeof google !== 'undefined' && google.maps && google.maps.places) {
            clearInterval(checkGoogleMaps);
            initGoogleAutocompleteFields();
        }
    }, 500);

    // MutationObserver –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–æ—Ä–º
    const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
            if (mutation.type === 'childList') {
                initGoogleAutocompleteFields();
            }
        });
    });

    observer.observe(document.body, { childList: true, subtree: true });
});